#[repr(i32)]
#[derive(Eq, PartialEq, Clone, Copy, FromPrimitive)]
pub enum KeyCode {
  
  Unknown,

  Space = 32,
  Apostrophe = 39,
  Comma = 44,
  Minus = 45,
  Period = 46,
  Slash = 47,

  Num0 = 48,
  Num1 = 49,
  Num2 = 50,
  Num3 = 51,
  Num4 = 52,
  Num5 = 53,
  Num6 = 54,
  Num7 = 55,
  Num8 = 56,
  Num9 = 57,

  Semicolon = 59,
  Equal = 61,

  A = 65,
  B = 66,
  C = 67,
  D = 68,
  E = 69,
  F = 70,
  G = 71,
  H = 72,
  I = 73,
  J = 74,
  K = 75,
  L = 76,
  M = 77,
  N = 78,
  O = 79,
  P = 80,
  Q = 81,
  R = 82,
  S = 83,
  T = 84,
  U = 85,
  V = 86,
  W = 87,
  X = 88,
  Y = 89,
  Z = 90,

  World1 = 161,
  World2 = 162,

  Escape = 256,
  Enter = 257,
  Tab = 258,
  Backspace = 259,
  Insert = 260,
  Delete = 261,
  Right = 262,
  Left = 263,
  Down = 264,
  Up = 265,
  PageUp = 266,
  PageDown = 267,
  Home = 268,
  End = 269,
  CapsLock = 280,
  ScrollLock = 281,
  NumLock = 282,
  PrintScreen = 283,
  Pause = 284,
  F1 = 290,
  F2 = 291,
  F3 = 292,
  F4 = 293,
  F5 = 294,
  F6 = 295,
  F7 = 296,
  F8 = 297,
  F9 = 298,
  F10 = 299,
  F11 = 300,
  F12 = 301,
  F13 = 302,
  F14 = 303,
  F15 = 304,
  F16 = 305,
  F17 = 306,
  F18 = 307,
  F19 = 308,
  F20 = 309,
  F21 = 310,
  F22 = 311,
  F23 = 312,
  F24 = 313,
  F25 = 314,

  KP0 = 320,
  KP1 = 321,
  KP2 = 322,
  KP3 = 323,
  KP4 = 324,
  KP5 = 325,
  KP6 = 326,
  KP7 = 327,
  KP8 = 328,
  KP9 = 329,
  KPDecimal = 330,
  KPDivide = 331,
  KPMultiply = 332,
  KPSubtract = 333,
  KPAdd = 334,
  KPEnter = 335,
  KPEqual = 336,

  LeftShift = 340,
  LeftControl = 341,
  LeftAlt = 342,
  LeftSuper = 343,
  RightShift = 344,
  RightControl = 345,
  RightAlt = 346,
  RightSuper = 347,
  Menu = 348

}

/* A helper method to allow us to convert quickly from Lightbox keycodes to GLFW keycodes. Sadly the
* rust glfw library does not provide a quick way to convet from i32 to glfw::Key. So, we must do it
* ourselves. This isn't the case for other input methods like mouse buttons or gamepad buttons.
*/
pub fn convert_key_to_glfw(key_code: KeyCode) -> glfw::Key {
  match key_code as u32 {
    32 => glfw::Key::Space,
    39 => glfw::Key::Apostrophe,
    44 => glfw::Key::Comma,
    45 => glfw::Key::Minus,
    46 => glfw::Key::Period,
    47 => glfw::Key::Slash,

    48 => glfw::Key::Num0,
    49 => glfw::Key::Num1,
    50 => glfw::Key::Num2,
    51 => glfw::Key::Num3,
    52 => glfw::Key::Num4,
    53 => glfw::Key::Num5,
    54 => glfw::Key::Num6,
    55 => glfw::Key::Num7,
    56 => glfw::Key::Num8,
    57 => glfw::Key::Num9,

    59 => glfw::Key::Semicolon,
    61 => glfw::Key::Equal,

    65 => glfw::Key::A,
    66 => glfw::Key::B,
    67 => glfw::Key::C,
    68 => glfw::Key::D,
    69 => glfw::Key::E,
    70 => glfw::Key::F,
    71 => glfw::Key::G,
    72 => glfw::Key::H,
    73 => glfw::Key::I,
    74 => glfw::Key::J,
    75 => glfw::Key::K,
    76 => glfw::Key::L,
    77 => glfw::Key::M,
    78 => glfw::Key::N,
    79 => glfw::Key::O,
    80 => glfw::Key::P,
    81 => glfw::Key::Q,
    82 => glfw::Key::R,
    83 => glfw::Key::S,
    84 => glfw::Key::T,
    85 => glfw::Key::U,
    86 => glfw::Key::V,
    87 => glfw::Key::W,
    88 => glfw::Key::X,
    89 => glfw::Key::Y,
    90 => glfw::Key::Z,

    161 => glfw::Key::World1,
    162 => glfw::Key::World2,

    256 => glfw::Key::Escape,
    257 => glfw::Key::Enter,
    258 => glfw::Key::Tab,
    259 => glfw::Key::Backspace,
    260 => glfw::Key::Insert,
    261 => glfw::Key::Delete,
    262 => glfw::Key::Right,
    263 => glfw::Key::Left,
    264 => glfw::Key::Down,
    265 => glfw::Key::Up,
    266 => glfw::Key::PageUp,
    267 => glfw::Key::PageDown,
    268 => glfw::Key::Home,
    269 => glfw::Key::End,
    280 => glfw::Key::CapsLock,
    281 => glfw::Key::ScrollLock,
    282 => glfw::Key::NumLock,
    283 => glfw::Key::PrintScreen,
    284 => glfw::Key::Pause,
    290 => glfw::Key::F1,
    291 => glfw::Key::F2,
    292 => glfw::Key::F3,
    293 => glfw::Key::F4,
    294 => glfw::Key::F5,
    295 => glfw::Key::F6,
    296 => glfw::Key::F7,
    297 => glfw::Key::F8,
    298 => glfw::Key::F9,
    299 => glfw::Key::F10,
    300 => glfw::Key::F11,
    301 => glfw::Key::F12,
    302 => glfw::Key::F13,
    303 => glfw::Key::F14,
    304 => glfw::Key::F15,
    305 => glfw::Key::F16,
    306 => glfw::Key::F17,
    307 => glfw::Key::F18,
    308 => glfw::Key::F19,
    309 => glfw::Key::F20,
    310 => glfw::Key::F21,
    311 => glfw::Key::F22,
    312 => glfw::Key::F23,
    313 => glfw::Key::F24,
    314 => glfw::Key::F25,

    320 => glfw::Key::Kp0,
    321 => glfw::Key::Kp1,
    322 => glfw::Key::Kp2,
    323 => glfw::Key::Kp3,
    324 => glfw::Key::Kp4,
    325 => glfw::Key::Kp5,
    326 => glfw::Key::Kp6,
    327 => glfw::Key::Kp7,
    328 => glfw::Key::Kp8,
    329 => glfw::Key::Kp9,
    330 => glfw::Key::KpDecimal,
    331 => glfw::Key::KpDivide,
    332 => glfw::Key::KpMultiply,
    333 => glfw::Key::KpSubtract,
    334 => glfw::Key::KpAdd,
    335 => glfw::Key::KpEnter,
    336 => glfw::Key::KpEqual,

    340 => glfw::Key::LeftShift,
    341 => glfw::Key::LeftControl,
    342 => glfw::Key::LeftAlt,
    343 => glfw::Key::LeftSuper,
    344 => glfw::Key::RightShift,
    345 => glfw::Key::RightControl,
    346 => glfw::Key::RightAlt,
    347 => glfw::Key::RightSuper,
    348 => glfw::Key::Menu,

    _ => glfw::Key::Unknown
  }
}
